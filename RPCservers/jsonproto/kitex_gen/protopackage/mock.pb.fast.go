// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package protopackage

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *MockReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_MockReq[number], err)
}

func (x *MockReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *MockReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	if x.StrMap == nil {
		x.StrMap = make(map[string]string)
	}
	var key string
	var value string
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadString(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			value, offset, err = fastpb.ReadString(buf, _type)
			return offset, err
		})
	if err != nil {
		return offset, err
	}
	x.StrMap[key] = value
	return offset, nil
}

func (x *MockReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.StrList = append(x.StrList, v)
	return offset, err
}

func (x *StringResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_StringResponse[number], err)
}

func (x *StringResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Response, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *MockReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *MockReq) fastWriteField1(buf []byte) (offset int) {
	if x.Msg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetMsg())
	return offset
}

func (x *MockReq) fastWriteField2(buf []byte) (offset int) {
	if x.StrMap == nil {
		return offset
	}
	for k, v := range x.GetStrMap() {
		offset += fastpb.WriteMapEntry(buf[offset:], 2,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteString(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteString(buf[offset:], numIdxOrVal, v)
				return offset
			})
	}
	return offset
}

func (x *MockReq) fastWriteField3(buf []byte) (offset int) {
	if len(x.StrList) == 0 {
		return offset
	}
	for i := range x.GetStrList() {
		offset += fastpb.WriteString(buf[offset:], 3, x.GetStrList()[i])
	}
	return offset
}

func (x *StringResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *StringResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Response == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetResponse())
	return offset
}

func (x *MockReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *MockReq) sizeField1() (n int) {
	if x.Msg == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetMsg())
	return n
}

func (x *MockReq) sizeField2() (n int) {
	if x.StrMap == nil {
		return n
	}
	for k, v := range x.GetStrMap() {
		n += fastpb.SizeMapEntry(2,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeString(numTagOrKey, k)
				n += fastpb.SizeString(numIdxOrVal, v)
				return n
			})
	}
	return n
}

func (x *MockReq) sizeField3() (n int) {
	if len(x.StrList) == 0 {
		return n
	}
	for i := range x.GetStrList() {
		n += fastpb.SizeString(3, x.GetStrList()[i])
	}
	return n
}

func (x *StringResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *StringResponse) sizeField1() (n int) {
	if x.Response == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetResponse())
	return n
}

var fieldIDToName_MockReq = map[int32]string{
	1: "Msg",
	2: "StrMap",
	3: "StrList",
}

var fieldIDToName_StringResponse = map[int32]string{
	1: "Response",
}
